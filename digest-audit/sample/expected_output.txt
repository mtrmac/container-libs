sample.go:103:20: identifier d
sample.go:105:15: selector Encoded
sample.go:115:23: identifier d
sample.go:116:5: binary-op !=
sample.go:117:15: call-arg a
sample.go:122:5: identifier globalDigestPtr
sample.go:125:5: identifier globalDigest
sample.go:129:2: identifier ID
sample.go:12:6: identifier d1
sample.go:131:2: identifier Backup
sample.go:137:12: field-access ID
sample.go:13:2: identifier d2
sample.go:141:21: identifier d
sample.go:143:7: case-value digest.FromString("a")
sample.go:157:6: identifier d
sample.go:158:2: identifier d
sample.go:164:9: range-var d
sample.go:165:23: call-arg a
sample.go:16:2: identifier d3
sample.go:176:2: identifier d1
sample.go:177:2: identifier d2
sample.go:180:37: call-arg digests
sample.go:180:41: call-arg digests
sample.go:183:23: call-arg arg0
sample.go:186:6: identifier ptrDigest
sample.go:187:8: selector Validate
sample.go:188:15: unary-op &
sample.go:188:3: identifier ptrDigest
sample.go:190:5: binary-op !=
sample.go:191:20: call-arg d
sample.go:20:13: selector Algorithm
sample.go:24:5: binary-op ==
sample.go:29:29: type-cast string
sample.go:33:16: call-arg d
sample.go:36:2: identifier d4
sample.go:40:41: selector Encoded
sample.go:44:5: binary-op ==
sample.go:49:16: call-arg d
sample.go:52:14: type-cast string
sample.go:56:23: selector Algorithm
sample.go:60:29: composite-lit d1
sample.go:60:33: composite-lit d2
sample.go:65:11: key-value d1
sample.go:66:11: key-value d2
sample.go:71:2: identifier idx
sample.go:75:9: range-var d
sample.go:76:15: call-arg a
sample.go:80:10: unary-op &
sample.go:80:2: identifier dPtr
sample.go:81:17: deref *dPtr
sample.go:81:2: identifier derefDigest
sample.go:86:7: case-value digest.FromString("test")
sample.go:88:7: case-value digest.FromString("other")
sample.go:93:2: identifier ptr
sample.go:93:9: unary-op &
sample.go:97:5: binary-op !=
